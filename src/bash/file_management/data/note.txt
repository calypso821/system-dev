"$imenik" = /* -> absolutna pot 
! "$imenik" = /* -> relativna pot
[ ! ${1::1}  = "-" ] - preveri ali je stikalo 
${argument 1::dolzina 1}
[[ ! "$size" =~ ^[0-9]+$ ]] - preveri ali je numericno 
zacetek 1 stevilka + katerakoli 
=~ preveri enakost regularnih izrazov = egrep
test -n - STRING ni 0  
test -z - STRING je 0 
echo xxx >&2 - preusmeritev izhoda echo na standardni izhod 

declare -a tabela
-a - indexed array 
tab+=(element)
[ "$dat" = "" ] == [ -z "$dat" ]

Internal Field Separator (IFS)- space, tab, newline 
IFS=$'\n' newline only 
IFS='' - NE splita, splita ze funkcija read  
IFS= empty 
while IFS=',' num1 num2; do echo "$num1"; echo "$num2"; done < file.txt

stat - file status 
-c ... format ""
%A - pravice 
%F - type 
%i - inode number 
%n - file name 
%s - size
%W, Y - acces time 

$(printf "%0${stevk}d-${name}" $velikost)
d= velikost 
%d - znak za format d
velikost %d na 4 
%4d - 4 mesta 
0- 000 na zacetku 

"${name##*.}" -> odstrani najdaljse (##) ujemanje
karkoli. -> ostane koncnica 

expr = (( )) 

<<< preusmeri string (niz)
< preusmeri output ukaza (izhod ukaza)

printf '%s\n' "${tabela[@]}" - sestavi string elementov tabele 
sort -nr -t'*' -k2 - numeric reverse sort, -t = filed seperator -k2 (column 2)
sortira glede na 2. column 
tr -d "*" = zamenjava znakov (-d brisi znake)

awk - Programski jezik za procesiranje texta 
Naredi Hashmap - dictionary
i = key 
a[i] = value 
awk '{ a[$1]+=$2 }END{ for(i in a) print i, a[i] " MB" }'
a[$1]+=$2 -> Hashmap
$1 - key = ce key ustreza pristeje value 
$2 = value 






